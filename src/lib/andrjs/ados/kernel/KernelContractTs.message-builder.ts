/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  InstantiateMsg,
  ExecuteMsg,
  AndrAddr,
  Uint128,
  ReplyOn,
  Binary,
  InternalMsg,
  OwnershipMessage,
  Expiry,
  Milliseconds,
  Addr,
  AMPPkt,
  AMPCtx,
  CrossChainHop,
  Coin,
  AMPMsg,
  AMPMsgConfig,
  IBCConfig,
  Cw20ReceiveMsg,
  QueryMsg,
  TypeResponse,
  ChainNameResponse,
  NullableString,
  NullableChannelInfoResponse,
  ChannelInfoResponse,
  EnvResponse,
  ContractOwnerResponse,
  PendingPacketResponse,
  PacketInfoAndSequence,
  Ics20PacketInfo,
  RecoveriesResponse,
  VerifyAddressResponse,
  VersionResponse,
} from "./KernelContractTs.types";
import { CamelCasedProperties } from "type-fest";
export abstract class KernelContractTsExecuteMsgBuilder {
  static ampReceive = ({
    ctx,
    messages,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        amp_receive: unknown;
      }
    >["amp_receive"]
  >): ExecuteMsg => {
    return {
      amp_receive: {
        ctx,
        messages,
      } as const,
    };
  };
  static receive = ({
    amount,
    msg,
    sender,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        receive: unknown;
      }
    >["receive"]
  >): ExecuteMsg => {
    return {
      receive: {
        amount,
        msg,
        sender,
      } as const,
    };
  };
  static send = ({
    message,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        send: unknown;
      }
    >["send"]
  >): ExecuteMsg => {
    return {
      send: {
        message,
      } as const,
    };
  };
  static triggerRelay = ({
    channelId,
    packetAck,
    packetSequence,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        trigger_relay: unknown;
      }
    >["trigger_relay"]
  >): ExecuteMsg => {
    return {
      trigger_relay: {
        channel_id: channelId,
        packet_ack: packetAck,
        packet_sequence: packetSequence,
      } as const,
    };
  };
  static upsertKeyAddress = ({
    key,
    value,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        upsert_key_address: unknown;
      }
    >["upsert_key_address"]
  >): ExecuteMsg => {
    return {
      upsert_key_address: {
        key,
        value,
      } as const,
    };
  };
  static create = ({
    adoType,
    chain,
    msg,
    owner,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        create: unknown;
      }
    >["create"]
  >): ExecuteMsg => {
    return {
      create: {
        ado_type: adoType,
        chain,
        msg,
        owner,
      } as const,
    };
  };
  static assignChannels = ({
    chain,
    directChannelId,
    ics20ChannelId,
    kernelAddress,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        assign_channels: unknown;
      }
    >["assign_channels"]
  >): ExecuteMsg => {
    return {
      assign_channels: {
        chain,
        direct_channel_id: directChannelId,
        ics20_channel_id: ics20ChannelId,
        kernel_address: kernelAddress,
      } as const,
    };
  };
  static recover = (): ExecuteMsg => {
    return {
      recover: {} as const,
    };
  };
  static updateChainName = ({
    chainName,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_chain_name: unknown;
      }
    >["update_chain_name"]
  >): ExecuteMsg => {
    return {
      update_chain_name: {
        chain_name: chainName,
      } as const,
    };
  };
  static setEnv = ({
    value,
    variable,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        set_env: unknown;
      }
    >["set_env"]
  >): ExecuteMsg => {
    return {
      set_env: {
        value,
        variable,
      } as const,
    };
  };
  static unsetEnv = ({
    variable,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        unset_env: unknown;
      }
    >["unset_env"]
  >): ExecuteMsg => {
    return {
      unset_env: {
        variable,
      } as const,
    };
  };
  static internal = (internalMsg: InternalMsg): ExecuteMsg => {
    return {
      internal: internalMsg,
    };
  };
  static ownership = (ownershipMessage: OwnershipMessage): ExecuteMsg => {
    return {
      ownership: ownershipMessage,
    };
  };
}
export abstract class KernelContractTsQueryMsgBuilder {
  static keyAddress = ({
    key,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        key_address: unknown;
      }
    >["key_address"]
  >): QueryMsg => {
    return {
      key_address: {
        key,
      } as const,
    };
  };
  static verifyAddress = ({
    address,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        verify_address: unknown;
      }
    >["verify_address"]
  >): QueryMsg => {
    return {
      verify_address: {
        address,
      } as const,
    };
  };
  static channelInfo = ({
    chain,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        channel_info: unknown;
      }
    >["channel_info"]
  >): QueryMsg => {
    return {
      channel_info: {
        chain,
      } as const,
    };
  };
  static chainNameByChannel = ({
    channel,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        chain_name_by_channel: unknown;
      }
    >["chain_name_by_channel"]
  >): QueryMsg => {
    return {
      chain_name_by_channel: {
        channel,
      } as const,
    };
  };
  static recoveries = ({
    addr,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        recoveries: unknown;
      }
    >["recoveries"]
  >): QueryMsg => {
    return {
      recoveries: {
        addr,
      } as const,
    };
  };
  static chainName = (): QueryMsg => {
    return {
      chain_name: {} as const,
    };
  };
  static version = (): QueryMsg => {
    return {
      version: {} as const,
    };
  };
  static type = (): QueryMsg => {
    return {
      type: {} as const,
    };
  };
  static owner = (): QueryMsg => {
    return {
      owner: {} as const,
    };
  };
  static pendingPackets = ({
    channelId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        pending_packets: unknown;
      }
    >["pending_packets"]
  >): QueryMsg => {
    return {
      pending_packets: {
        channel_id: channelId,
      } as const,
    };
  };
  static getEnv = ({
    variable,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        get_env: unknown;
      }
    >["get_env"]
  >): QueryMsg => {
    return {
      get_env: {
        variable,
      } as const,
    };
  };
}
