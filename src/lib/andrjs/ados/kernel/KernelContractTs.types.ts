/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  chain_name: string;
  owner?: string | null;
}
export type ExecuteMsg =
  | {
      amp_receive: AMPPkt;
    }
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      send: {
        message: AMPMsg;
      };
    }
  | {
      trigger_relay: {
        channel_id: string;
        packet_ack: Binary;
        packet_sequence: number;
      };
    }
  | {
      upsert_key_address: {
        key: string;
        value: string;
      };
    }
  | {
      create: {
        ado_type: string;
        chain?: string | null;
        msg: Binary;
        owner?: AndrAddr | null;
      };
    }
  | {
      assign_channels: {
        chain: string;
        direct_channel_id?: string | null;
        ics20_channel_id?: string | null;
        kernel_address: string;
      };
    }
  | {
      recover: {};
    }
  | {
      update_chain_name: {
        chain_name: string;
      };
    }
  | {
      set_env: {
        value: string;
        variable: string;
      };
    }
  | {
      unset_env: {
        variable: string;
      };
    }
  | {
      internal: InternalMsg;
    }
  | {
      ownership: OwnershipMessage;
    };
export type AndrAddr = string;
export type Uint128 = string;
export type ReplyOn = "always" | "error" | "success" | "never";
export type Binary = string;
export type InternalMsg = {
  register_user_cross_chain: {
    address: string;
    chain: string;
    username: string;
  };
};
export type OwnershipMessage =
  | ("revoke_ownership_offer" | "accept_ownership" | "disown")
  | {
      update_owner: {
        expiration?: Expiry | null;
        new_owner: Addr;
      };
    };
export type Expiry =
  | {
      from_now: Milliseconds;
    }
  | {
      at_time: Milliseconds;
    };
export type Milliseconds = number;
export type Addr = string;
export interface AMPPkt {
  ctx: AMPCtx;
  messages: AMPMsg[];
}
export interface AMPCtx {
  id?: string | null;
  origin: string;
  origin_username?: AndrAddr | null;
  previous_hops?: CrossChainHop[];
  previous_sender: string;
}
export interface CrossChainHop {
  address: string;
  channel: string;
  from_chain: string;
  funds: Coin[];
  to_chain: string;
  username?: AndrAddr | null;
}
export interface Coin {
  amount: Uint128;
  denom: string;
}
export interface AMPMsg {
  config: AMPMsgConfig;
  funds: Coin[];
  message: Binary;
  recipient: AndrAddr;
}
export interface AMPMsgConfig {
  direct: boolean;
  exit_at_error: boolean;
  gas_limit?: number | null;
  ibc_config?: IBCConfig | null;
  reply_on: ReplyOn;
}
export interface IBCConfig {
  recovery_addr?: AndrAddr | null;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg =
  | {
      key_address: {
        key: string;
      };
    }
  | {
      verify_address: {
        address: string;
      };
    }
  | {
      channel_info: {
        chain: string;
      };
    }
  | {
      chain_name_by_channel: {
        channel: string;
      };
    }
  | {
      recoveries: {
        addr: Addr;
      };
    }
  | {
      chain_name: {};
    }
  | {
      version: {};
    }
  | {
      type: {};
    }
  | {
      owner: {};
    }
  | {
      pending_packets: {
        channel_id?: string | null;
      };
    }
  | {
      get_env: {
        variable: string;
      };
    };
export interface TypeResponse {
  ado_type: string;
}
export interface ChainNameResponse {
  chain_name: string;
}
export type NullableString = string | null;
export type NullableChannelInfoResponse = ChannelInfoResponse | null;
export interface ChannelInfoResponse {
  direct?: string | null;
  ics20?: string | null;
  kernel_address: string;
  supported_modules: string[];
}
export interface EnvResponse {
  value?: string | null;
}
export interface ContractOwnerResponse {
  owner: string;
}
export interface PendingPacketResponse {
  packets: PacketInfoAndSequence[];
}
export interface PacketInfoAndSequence {
  packet_info: Ics20PacketInfo;
  sequence: number;
}
export interface Ics20PacketInfo {
  channel: string;
  funds: Coin;
  message: Binary;
  pending: boolean;
  recipient: AndrAddr;
  sender: string;
}
export interface RecoveriesResponse {
  recoveries: Coin[];
}
export interface VerifyAddressResponse {
  verify_address: boolean;
}
export interface VersionResponse {
  version: string;
}
export type KernelContractTsExecuteMsg = ExecuteMsg;
