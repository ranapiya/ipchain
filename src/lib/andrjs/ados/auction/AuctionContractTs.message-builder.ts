/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  AndrAddr,
  InstantiateMsg,
  ExecuteMsg,
  Binary,
  Uint128,
  Asset,
  Expiry,
  Milliseconds,
  Addr,
  PermissionAction,
  ReplyOn,
  OwnershipMessage,
  PermissioningMessage,
  Permission,
  LocalPermission,
  RatesMessage,
  Rate,
  LocalRateType,
  LocalRateValue,
  Decimal,
  Cw721ReceiveMsg,
  Cw20ReceiveMsg,
  Recipient,
  Schedule,
  AMPPkt,
  AMPCtx,
  CrossChainHop,
  Coin,
  AMPMsg,
  AMPMsgConfig,
  IBCConfig,
  LocalRate,
  PercentRate,
  QueryMsg,
  OrderBy,
  ADOBaseVersionResponse,
  AllRatesResponse,
  AppContractResponse,
  AuctionIdsResponse,
  AuctionInfo,
  AuctionStateResponse,
  AuthorizedAddressesResponse,
  BidsResponse,
  Bid,
  BlockHeightResponse,
  IsCancelledResponse,
  IsClaimedResponse,
  IsClosedResponse,
  KernelAddressResponse,
  PublisherResponse,
  ContractOwnerResponse,
  ContractPotentialOwnerResponse,
  PermissionedActionsResponse,
  PermissionInfo,
  NullableRate,
  TypeResponse,
  VersionResponse,
} from "./AuctionContractTs.types";
import { CamelCasedProperties } from "type-fest";
export abstract class AuctionContractTsExecuteMsgBuilder {
  static receiveNft = ({
    msg,
    sender,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        receive_nft: unknown;
      }
    >["receive_nft"]
  >): ExecuteMsg => {
    return {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId,
      } as const,
    };
  };
  static receive = ({
    amount,
    msg,
    sender,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        receive: unknown;
      }
    >["receive"]
  >): ExecuteMsg => {
    return {
      receive: {
        amount,
        msg,
        sender,
      } as const,
    };
  };
  static placeBid = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        place_bid: unknown;
      }
    >["place_bid"]
  >): ExecuteMsg => {
    return {
      place_bid: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static buyNow = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        buy_now: unknown;
      }
    >["buy_now"]
  >): ExecuteMsg => {
    return {
      buy_now: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static claim = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        claim: unknown;
      }
    >["claim"]
  >): ExecuteMsg => {
    return {
      claim: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static updateAuction = ({
    buyNowPrice,
    coinDenom,
    minBid,
    minRaise,
    recipient,
    schedule,
    tokenAddress,
    tokenId,
    whitelist,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_auction: unknown;
      }
    >["update_auction"]
  >): ExecuteMsg => {
    return {
      update_auction: {
        buy_now_price: buyNowPrice,
        coin_denom: coinDenom,
        min_bid: minBid,
        min_raise: minRaise,
        recipient,
        schedule,
        token_address: tokenAddress,
        token_id: tokenId,
        whitelist,
      } as const,
    };
  };
  static cancelAuction = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        cancel_auction: unknown;
      }
    >["cancel_auction"]
  >): ExecuteMsg => {
    return {
      cancel_auction: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static authorizeContract = ({
    action,
    addr,
    expiration,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        authorize_contract: unknown;
      }
    >["authorize_contract"]
  >): ExecuteMsg => {
    return {
      authorize_contract: {
        action,
        addr,
        expiration,
      } as const,
    };
  };
  static deauthorizeContract = ({
    action,
    addr,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        deauthorize_contract: unknown;
      }
    >["deauthorize_contract"]
  >): ExecuteMsg => {
    return {
      deauthorize_contract: {
        action,
        addr,
      } as const,
    };
  };
  static ampReceive = ({
    ctx,
    messages,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        amp_receive: unknown;
      }
    >["amp_receive"]
  >): ExecuteMsg => {
    return {
      amp_receive: {
        ctx,
        messages,
      } as const,
    };
  };
  static ownership = (ownershipMessage: OwnershipMessage): ExecuteMsg => {
    return {
      ownership: ownershipMessage,
    };
  };
  static updateKernelAddress = ({
    address,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_kernel_address: unknown;
      }
    >["update_kernel_address"]
  >): ExecuteMsg => {
    return {
      update_kernel_address: {
        address,
      } as const,
    };
  };
  static updateAppContract = ({
    address,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_app_contract: unknown;
      }
    >["update_app_contract"]
  >): ExecuteMsg => {
    return {
      update_app_contract: {
        address,
      } as const,
    };
  };
  static permissioning = (
    permissioningMessage: PermissioningMessage,
  ): ExecuteMsg => {
    return {
      permissioning: permissioningMessage,
    };
  };
  static rates = (ratesMessage: RatesMessage): ExecuteMsg => {
    return {
      rates: ratesMessage,
    };
  };
}
export abstract class AuctionContractTsQueryMsgBuilder {
  static latestAuctionState = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        latest_auction_state: unknown;
      }
    >["latest_auction_state"]
  >): QueryMsg => {
    return {
      latest_auction_state: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static auctionState = ({
    auctionId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        auction_state: unknown;
      }
    >["auction_state"]
  >): QueryMsg => {
    return {
      auction_state: {
        auction_id: auctionId,
      } as const,
    };
  };
  static auctionIds = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        auction_ids: unknown;
      }
    >["auction_ids"]
  >): QueryMsg => {
    return {
      auction_ids: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static auctionInfosForAddress = ({
    limit,
    startAfter,
    tokenAddress,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        auction_infos_for_address: unknown;
      }
    >["auction_infos_for_address"]
  >): QueryMsg => {
    return {
      auction_infos_for_address: {
        limit,
        start_after: startAfter,
        token_address: tokenAddress,
      } as const,
    };
  };
  static authorizedAddresses = ({
    action,
    limit,
    orderBy,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        authorized_addresses: unknown;
      }
    >["authorized_addresses"]
  >): QueryMsg => {
    return {
      authorized_addresses: {
        action,
        limit,
        order_by: orderBy,
        start_after: startAfter,
      } as const,
    };
  };
  static bids = ({
    auctionId,
    limit,
    orderBy,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        bids: unknown;
      }
    >["bids"]
  >): QueryMsg => {
    return {
      bids: {
        auction_id: auctionId,
        limit,
        order_by: orderBy,
        start_after: startAfter,
      } as const,
    };
  };
  static isCancelled = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        is_cancelled: unknown;
      }
    >["is_cancelled"]
  >): QueryMsg => {
    return {
      is_cancelled: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static isClosed = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        is_closed: unknown;
      }
    >["is_closed"]
  >): QueryMsg => {
    return {
      is_closed: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static isClaimed = ({
    tokenAddress,
    tokenId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        is_claimed: unknown;
      }
    >["is_claimed"]
  >): QueryMsg => {
    return {
      is_claimed: {
        token_address: tokenAddress,
        token_id: tokenId,
      } as const,
    };
  };
  static owner = (): QueryMsg => {
    return {
      owner: {} as const,
    };
  };
  static ownershipRequest = (): QueryMsg => {
    return {
      ownership_request: {} as const,
    };
  };
  static type = (): QueryMsg => {
    return {
      type: {} as const,
    };
  };
  static kernelAddress = (): QueryMsg => {
    return {
      kernel_address: {} as const,
    };
  };
  static appContract = (): QueryMsg => {
    return {
      app_contract: {} as const,
    };
  };
  static originalPublisher = (): QueryMsg => {
    return {
      original_publisher: {} as const,
    };
  };
  static blockHeightUponCreation = (): QueryMsg => {
    return {
      block_height_upon_creation: {} as const,
    };
  };
  static version = (): QueryMsg => {
    return {
      version: {} as const,
    };
  };
  static aDOBaseVersion = (): QueryMsg => {
    return {
      a_d_o_base_version: {} as const,
    };
  };
  static permissions = ({
    actor,
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        permissions: unknown;
      }
    >["permissions"]
  >): QueryMsg => {
    return {
      permissions: {
        actor,
        limit,
        start_after: startAfter,
      } as const,
    };
  };
  static permissionedActions = (): QueryMsg => {
    return {
      permissioned_actions: {} as const,
    };
  };
  static rates = ({
    action,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        rates: unknown;
      }
    >["rates"]
  >): QueryMsg => {
    return {
      rates: {
        action,
      } as const,
    };
  };
  static allRates = (): QueryMsg => {
    return {
      all_rates: {} as const,
    };
  };
}
